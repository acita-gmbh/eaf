<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:flowable="http://flowable.org/bpmn"
             targetNamespace="http://www.axians.com/eaf/test">

  <!--
    Story 6.5 (Task 4.1): TestEntity Compensation Workflow Test Process

    Framework-pure E2E test for compensating action pattern:
    1. Create TestEntity via DispatchAxonCommandTask
    2. Execute Ansible task (forced to fail)
    3. Boundary error event triggers compensation flow
    4. Compensation task dispatches CancelTestEntityCommand
    5. Process completes via compensation path

    Test validates: TECH-001 mitigation (compensation branch wiring)
  -->

  <process id="test-entity-compensation" name="TestEntity Compensation Test" isExecutable="true">

    <startEvent id="start" name="Start" />

    <!-- Step 1: Create TestEntity -->
    <serviceTask id="createEntity"
                 name="Create Test Entity"
                 flowable:delegateExpression="${dispatchAxonCommandTask}" />

    <!-- Step 2: Ansible Task (will fail) -->
    <serviceTask id="ansibleTask"
                 name="Run Ansible"
                 flowable:delegateExpression="${runAnsiblePlaybookTask}" />

    <!-- Boundary Error -->
    <boundaryEvent id="ansibleError"
                   attachedToRef="ansibleTask">
      <errorEventDefinition errorRef="ansibleFailed" />
    </boundaryEvent>

    <!-- Set Compensation Command Class (ARCH-001 Remediation) -->
    <serviceTask id="setCompensationCommand"
                 name="Set Compensation Command"
                 flowable:delegateExpression="${setCommandTypeDelegate}">
      <documentation>
        ARCH-001: Sets commandClassName + constructorParameters for compensation flow.
        Framework-agnostic pure reflection pattern (no compile-time product dependencies).
      </documentation>
      <extensionElements>
        <flowable:field name="targetCommandClassName">
          <flowable:string>com.axians.eaf.framework.workflow.test.CancelTestEntityCommand</flowable:string>
        </flowable:field>
        <flowable:field name="targetConstructorParameters">
          <flowable:string>entityId,tenantId,cancellationReason,operator</flowable:string>
        </flowable:field>
      </extensionElements>
    </serviceTask>

    <!-- Compensation Task -->
    <serviceTask id="compensationTask"
                 name="Cancel Test Entity"
                 flowable:delegateExpression="${dispatchAxonCommandTask}">
      <documentation>
        Dispatches CancelTestEntityCommand using generic DispatchAxonCommandTask delegate.
        Requires commandType variable set by preceding script task.
      </documentation>
    </serviceTask>

    <!-- End Events -->
    <endEvent id="endSuccess" name="Success" />
    <endEvent id="endCompensated" name="Compensated" />

    <!-- Flows -->
    <sequenceFlow id="flow1" sourceRef="start" targetRef="createEntity" />
    <sequenceFlow id="flow2" sourceRef="createEntity" targetRef="ansibleTask" />
    <sequenceFlow id="flow3" sourceRef="ansibleTask" targetRef="endSuccess" />
    <sequenceFlow id="flow4" sourceRef="ansibleError" targetRef="setCompensationCommand" />
    <sequenceFlow id="flow5" sourceRef="setCompensationCommand" targetRef="compensationTask" />
    <sequenceFlow id="flow6" sourceRef="compensationTask" targetRef="endCompensated" />

  </process>

  <error id="ansibleFailed" errorCode="ANSIBLE_FAILED" />

</definitions>
