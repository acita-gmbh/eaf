<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>2</storyId>
    <title>Create Multi-Module Structure</title>
    <status>drafted</status>
    <generatedAt>2025-11-01</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/epic-1/story-1.2-create-multi-module-structure.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>framework developer</asA>
    <iWant>establish the multi-module monorepo structure (framework/, products/, shared/, apps/, tools/)</iWant>
    <soThat>I have a logical organization matching the architectural design</soThat>
    <tasks>
      - Create top-level directories (framework/, products/, shared/, apps/, tools/, docker/, scripts/, docs/)
      - Create framework submodules: core, security, multi-tenancy, cqrs, persistence, observability, workflow, web
      - Create build.gradle.kts for each module (empty configuration)
      - Update settings.gradle.kts to include all modules
      - Create empty src/main/kotlin/ and src/test/kotlin/ directories in each module
      - Run `./gradlew projects` - verify all modules listed
      - Run `./gradlew build` - verify compilation succeeds
      - Commit: "Create multi-module monorepo structure"
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Directory structure created: framework/, products/, shared/, apps/, tools/, docker/, scripts/, docs/
    2. Each top-level directory has build.gradle.kts
    3. settings.gradle.kts includes all modules
    4. Framework submodules defined: core, security, multi-tenancy, cqrs, persistence, observability, workflow, web
    5. All modules compile with empty src/ directories
    6. ./gradlew projects lists all modules correctly
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/PRD.md" title="Product Requirements Document" section="FR001">
        "The system shall provide one-command initialization of complete local development stack (PostgreSQL, Keycloak, Redis, Prometheus, Grafana) with automatic migrations and seed data, plus Gradle multi-module monorepo structure with Spring Modulith boundary enforcement and Docker Compose templates."
      </doc>
      <doc path="docs/PRD.md" title="Product Requirements Document" section="FR010">
        "The system shall implement hexagonal architecture where infrastructure components are swappable adapters isolated from domain logic."
      </doc>
      <doc path="docs/architecture.md" title="Architecture Document" section="Section 5: Complete Project Structure">
        "Multi-module monorepo structure with framework/ (8 modules: core, security, multi-tenancy, cqrs, persistence, observability, workflow, web), products/ (widget-demo), shared/ (shared-api, shared-types, testing), apps/ (admin), tools/ (eaf-cli), build-logic/ (convention plugins), docker/, scripts/, and docs/. Spring Modulith enforcement with programmatic boundary validation."
      </doc>
      <doc path="docs/architecture/coding-standards.md" title="Coding Standards" section="Module Organization">
        "Framework modules contain ONLY infrastructure (publishable libraries). Domain aggregates, handlers, and business logic belong in product modules. Each module requires ModuleMetadata class with @ApplicationModule annotation."
      </doc>
      <doc path="docs/tech-spec.md" title="Technical Specification" section="Section 3: FR001 Implementation">
        "FR001 maps to Epic 1 stories, establishing Gradle build foundation with Version Catalog, convention plugins, and multi-module structure enforced by Spring Modulith 1.4.4."
      </doc>
    </docs>
    <code>
      <artifact path="settings.gradle.kts" kind="build" reason="Current module inclusions - MISSING multi-tenancy module per AC4" />
      <artifact path="build.gradle.kts" kind="build" reason="Root build configuration with Version Catalog pattern" />
      <artifact path="gradle/libs.versions.toml" kind="config" reason="Version Catalog with all dependencies (Gradle 9.1.0, Kotlin 2.2.21, Spring Boot 3.5.7, Spring Modulith 1.4.4)" />
      <artifact path="build-logic/src/main/kotlin/conventions/" kind="plugins" reason="Gradle convention plugins directory - existing patterns to follow" />
      <artifact path="framework/core/build.gradle.kts" kind="build" reason="Example framework module build file" />
      <artifact path="shared/shared-api/build.gradle.kts" kind="build" reason="Example shared module build file (created in Story 1.1)" />
    </code>
    <dependencies>
      <gradle>
        <dependency name="gradle" version="9.1.0" />
        <dependency name="kotlin" version="2.2.21" />
        <dependency name="spring-boot" version="3.5.7" />
        <dependency name="spring-modulith" version="1.4.4" />
        <dependency name="axon" version="4.12.1" />
        <dependency name="kotest" version="6.0.4" />
        <dependency name="testcontainers" version="1.21.3" />
        <dependency name="ktlint" version="1.7.1" />
        <dependency name="detekt" version="1.23.8" />
        <dependency name="konsist" version="0.17.3" />
        <dependency name="pitest" version="1.19.0-rc.2" />
      </gradle>
    </dependencies>
  </artifacts>

  <constraints>
    - CRITICAL: Framework modules must include multi-tenancy (currently MISSING in settings.gradle.kts)
    - All 8 framework modules required: core, security, multi-tenancy, cqrs, persistence, observability, workflow, web
    - Framework modules contain ONLY infrastructure (publishable libraries) - NO domain logic
    - Domain aggregates and business logic belong in products/ modules
    - Each module must have build.gradle.kts with proper plugin configuration
    - Use Version Catalog for all dependencies (gradle/libs.versions.toml)
    - Spring Modulith enforcement via @ApplicationModule annotations (Story 1.8)
    - Zero-violations policy: ktlint, Detekt, Konsist must pass from inception
    - Module directory structure: src/main/kotlin/, src/test/kotlin/
  </constraints>
  <interfaces>
    <interface name="Gradle Settings" kind="Configuration" signature="settings.gradle.kts" path="settings.gradle.kts">
      Module registration - include() statements for all framework, products, shared, apps, tools modules
    </interface>
    <interface name="Module Build" kind="Configuration" signature="build.gradle.kts" path="framework/*/build.gradle.kts">
      Per-module Gradle build file with plugin configuration (eaf.kotlin-common, eaf.spring-boot for products)
    </interface>
    <interface name="Version Catalog" kind="Configuration" signature="libs.versions.toml" path="gradle/libs.versions.toml">
      Centralized dependency version management - all versions MUST be defined here
    </interface>
  </interfaces>
  <tests>
    <standards>
      Constitutional TDD: Test-first mandatory for all production code. Use Kotest 6.0.4 (JUnit forbidden).
      7-Layer Defense: Static → Unit → Integration → Property → Fuzz → Concurrency → Mutation testing.
      Testcontainers for stateful dependencies (PostgreSQL, Keycloak, Redis).
      Nullable Design Pattern for fast business logic tests.
      Zero-violations policy: ktlint 1.7.1, Detekt 1.23.8, Konsist 0.17.3 must pass.
      Coverage targets: 85%+ line coverage (Kover 0.9.3), 60-70% mutation coverage (Pitest 1.19.0).
    </standards>
    <locations>
      - src/test/kotlin (unit tests with Kotest)
      - src/integrationTest/kotlin (integration tests with Testcontainers)
      - src/propertyTest/kotlin (property-based tests with Kotest)
      - src/fuzzTest/kotlin (fuzz tests with Jazzer 0.25.1)
      - build-logic/src/test/kotlin (convention plugin tests)
    </locations>
    <ideas>
      AC1: Integration test verifying all required directories exist (framework/, products/, shared/, apps/, tools/, docker/, scripts/, docs/)
      AC2: Verification test checking each directory contains build.gradle.kts
      AC3: Settings verification test parsing settings.gradle.kts for all required module inclusions
      AC4: Framework module validation test ensuring all 8 modules present (core, security, multi-tenancy, cqrs, persistence, observability, workflow, web)
      AC5: Compilation smoke test running `./gradlew build` on empty modules
      AC6: Gradle project listing test validating `./gradlew projects` output matches expected module structure
    </ideas>
  </tests>
</story-context>
