<story-context id="epic-1/story-1.3" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.3</storyId>
    <title>Implement Convention Plugins in build-logic/</title>
    <status>TODO</status>
    <generatedAt>2025-11-01</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/epic-1/story-1.3-implement-convention-plugins.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>framework developer</asA>
    <iWant>create Gradle convention plugins for common configurations</iWant>
    <soThat>all modules share consistent build settings without duplication</soThat>
    <tasks>
      - Create build-logic/ composite build with Gradle Kotlin DSL
      - Implement KotlinCommonConventionPlugin.kt with Kotlin 2.2.21, JVM 21, strict compilation, ktlint, and Detekt
      - Implement SpringBootConventionPlugin.kt with Spring Boot 3.5.7, Modulith, and common starters
      - Implement QualityGatesConventionPlugin.kt with ktlint, Detekt, Konsist, Pitest, Kover integration
      - Implement TestingConventionPlugin.kt with Kotest 6.0.4, Testcontainers, multiple test source sets
      - Implement Catalog.kt helper for parsing gradle/libs.versions.toml
      - Apply convention plugins to framework/core module as proof-of-concept
      - Run ./gradlew build to verify consistent configuration across modules
      - Commit changes with clear message
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC1">build-logic/ composite build created with proper Gradle structure (build.gradle.kts, settings.gradle.kts)</criterion>
    <criterion id="AC2">Convention plugins implemented: eaf.kotlin-common, eaf.spring-boot, eaf.quality-gates, eaf.testing</criterion>
    <criterion id="AC3">All framework modules apply relevant convention plugins via build files</criterion>
    <criterion id="AC4">./gradlew build compiles all modules with consistent settings from convention plugins</criterion>
    <criterion id="AC5">Convention plugins tested with at least one framework module (framework/core)</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/PRD.md</path>
        <relevance>Defines FR001 (Development Environment Setup) and FR008 (Quality Gates) requirements that convention plugins fulfill</relevance>
        <summary>PRD establishes one-command setup, consistent build configuration, and quality gate enforcement as core requirements. Convention plugins deliver these through reusable build configuration.</summary>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <relevance>Section 2 (Version Verification Log) lists all verified technology versions (Kotlin 2.2.21, Spring Boot 3.5.7, ktlint 1.7.1, Detekt 1.23.8, Kotest 6.0.4) that convention plugins must enforce</relevance>
        <summary>Architecture document provides comprehensive version matrix verified 2025-10-30/31. Convention plugins ensure all modules use these exact versions through Version Catalog references.</summary>
      </doc>
      <doc>
        <path>docs/tech-spec.md</path>
        <relevance>Section 2.1 (Core Technology Stack) defines exact versions and compatibility requirements for build system</relevance>
        <summary>Technical specification maps FR001 and FR008 to concrete technology choices. Convention plugins implement these as reusable Gradle plugins.</summary>
      </doc>
      <doc>
        <path>docs/architecture/coding-standards.md</path>
        <relevance>Defines mandatory coding standards including zero-tolerance policies (no wildcard imports, Kotest only, explicit versions) that convention plugins enforce</relevance>
        <summary>Coding standards establish zero-tolerance policies enforced through ktlint, Detekt, and Konsist. Convention plugins wire these tools into build lifecycle with correct configuration.</summary>
      </doc>
      <doc>
        <path>docs/architecture/test-strategy.md</path>
        <relevance>Defines 7-layer testing strategy, Constitutional TDD requirements, Kotest framework mandate, and test source set structure that TestingConventionPlugin implements</relevance>
        <summary>Test strategy mandates Kotest 6.0.4 with multiple source sets (test, integrationTest, konsistTest, perfTest). TestingConventionPlugin creates these source sets and wires dependencies.</summary>
      </doc>
      <doc>
        <path>docs/epics.md</path>
        <relevance>Epic 1 context establishes foundation infrastructure goals that convention plugins directly support</relevance>
        <summary>Epic 1 Story 1.3 delivers reusable convention plugins eliminating configuration duplication. This is foundational for all subsequent epic development.</summary>
      </doc>
    </docs>

    <code>
      <artifact>
        <path>build-logic/src/main/kotlin/conventions/KotlinCommonConventionPlugin.kt</path>
        <type>convention-plugin</type>
        <purpose>Configures Kotlin 2.2.21, JVM 21 toolchain, strict compiler options (-Xjsr305=strict, allWarningsAsErrors), ktlint 1.7.1, and Detekt 1.23.8 for all Kotlin modules</purpose>
        <keyFeatures>
          - JVM 21 toolchain enforcement
          - Strict compiler flags including JSR-305 nullability annotations
          - ktlint with explicit import verification (no wildcards)
          - Detekt with buildUponDefaultConfig and zero failures tolerance
          - All warnings treated as errors for compile-time enforcement
        </keyFeatures>
      </artifact>
      <artifact>
        <path>build-logic/src/main/kotlin/conventions/SpringBootConventionPlugin.kt</path>
        <type>convention-plugin</type>
        <purpose>Applies Spring Boot 3.5.7, Spring Modulith 1.4.4, and common starters (web, actuator, validation, security, oauth2-resource-server) to product modules</purpose>
        <keyFeatures>
          - Inherits eaf.kotlin-common (applies it first)
          - Spring Boot plugin with dependency management
          - Kotlin Spring plugin for all-open configuration
          - Kotlin JPA plugin for entity classes
          - Common starters bundled for all Spring Boot applications
        </keyFeatures>
      </artifact>
      <artifact>
        <path>build-logic/src/main/kotlin/conventions/QualityGatesConventionPlugin.kt</path>
        <type>convention-plugin</type>
        <purpose>Wires quality gates (ktlint, Detekt, Konsist, Pitest 1.19.0, Kover 0.9.3) into check task with Constitutional TDD messaging</purpose>
        <keyFeatures>
          - Integrates all quality tools into single check lifecycle
          - Pitest with Kotest plugin and STRONGER mutators
          - Kover for Kotlin-native code coverage (replaces JaCoCo)
          - OWASP Dependency Check (temporarily disabled for dev performance)
          - Fail-fast on violations with clear Constitutional TDD messaging
        </keyFeatures>
      </artifact>
      <artifact>
        <path>build-logic/src/main/kotlin/conventions/TestingConventionPlugin.kt</path>
        <type>convention-plugin</type>
        <purpose>Configures Kotest 6.0.4 native execution, Testcontainers 1.21.3, and multiple test source sets (test, integrationTest, konsistTest, perfTest)</purpose>
        <keyFeatures>
          - Native Kotest execution via io.kotest plugin (no JUnit Platform)
          - Test source sets with proper dependency inheritance
          - CI test tasks with JUnit Platform for XML reporting
          - Testcontainers bootstrap for integration tests
          - Catalog alignment verification in afterEvaluate block
        </keyFeatures>
      </artifact>
      <artifact>
        <path>build-logic/src/main/kotlin/conventions/Catalog.kt</path>
        <type>helper-utility</type>
        <purpose>Parses gradle/libs.versions.toml and provides version/library lookup for convention plugins with caching for performance</purpose>
        <keyFeatures>
          - Concurrent caching based on file path and last modified time
          - Parses [versions] and [libraries] sections from TOML
          - Resolves version.ref references to actual version strings
          - Error reporting for missing aliases
          - Thread-safe for parallel Gradle configuration
        </keyFeatures>
      </artifact>
      <artifact>
        <path>build-logic/build.gradle.kts</path>
        <type>composite-build</type>
        <purpose>Defines build-logic as Gradle composite build with dependencies on Gradle plugins and registers 8 convention plugins (kotlin-common, spring-boot, testing, quality-gates, logging, observability, workflow, pre-commit-hooks)</purpose>
        <keyFeatures>
          - kotlin-dsl plugin for writing plugins in Kotlin
          - JVM 21 toolchain alignment
          - All Gradle plugin dependencies from Version Catalog
          - gradlePlugin block registers 8 convention plugins
          - Kotest dependencies for testing build-logic itself
        </keyFeatures>
      </artifact>
      <artifact>
        <path>build-logic/settings.gradle.kts</path>
        <type>composite-build</type>
        <purpose>Configures build-logic settings with version catalog reference to parent gradle/libs.versions.toml</purpose>
        <keyFeatures>
          - Repository configuration (gradlePluginPortal, mavenCentral)
          - Version catalog reference to ../gradle/libs.versions.toml
          - Root project name "build-logic"
        </keyFeatures>
      </artifact>
    </code>

    <dependencies>
      <dependency>
        <name>Gradle</name>
        <version>9.1.0</version>
        <source>gradle/libs.versions.toml [versions.gradle]</source>
        <purpose>Build tool providing composite build support and Kotlin DSL for convention plugins</purpose>
      </dependency>
      <dependency>
        <name>Kotlin</name>
        <version>2.2.21</version>
        <source>gradle/libs.versions.toml [versions.kotlin]</source>
        <purpose>Language for convention plugins and application code. KotlinCommonConventionPlugin enforces this version across all modules.</purpose>
      </dependency>
      <dependency>
        <name>Spring Boot</name>
        <version>3.5.7</version>
        <source>gradle/libs.versions.toml [versions.spring-boot]</source>
        <purpose>Application framework. SpringBootConventionPlugin applies this version via Gradle plugin.</purpose>
      </dependency>
      <dependency>
        <name>Spring Modulith</name>
        <version>1.4.4</version>
        <source>gradle/libs.versions.toml [versions.spring-modulith]</source>
        <purpose>Architecture boundary enforcement. SpringBootConventionPlugin includes modulith starters.</purpose>
      </dependency>
      <dependency>
        <name>ktlint</name>
        <version>1.7.1</version>
        <source>gradle/libs.versions.toml [versions.ktlint]</source>
        <purpose>Code formatting enforcing no wildcard imports. KotlinCommonConventionPlugin configures with PLAIN and CHECKSTYLE reporters.</purpose>
      </dependency>
      <dependency>
        <name>Detekt</name>
        <version>1.23.8</version>
        <source>gradle/libs.versions.toml [versions.detekt]</source>
        <purpose>Static analysis. KotlinCommonConventionPlugin configures with config/detekt/detekt.yml.</purpose>
      </dependency>
      <dependency>
        <name>Kotest</name>
        <version>6.0.4</version>
        <source>gradle/libs.versions.toml [versions.kotest]</source>
        <purpose>Primary testing framework (JUnit forbidden). TestingConventionPlugin configures native execution and multiple source sets.</purpose>
      </dependency>
      <dependency>
        <name>Testcontainers</name>
        <version>1.21.3</version>
        <source>gradle/libs.versions.toml [versions.testcontainers]</source>
        <purpose>Real dependencies for integration tests. TestingConventionPlugin includes PostgreSQL and Keycloak modules.</purpose>
      </dependency>
      <dependency>
        <name>Konsist</name>
        <version>0.17.3</version>
        <source>gradle/libs.versions.toml [versions.konsist]</source>
        <purpose>Architecture testing for module boundaries. TestingConventionPlugin creates konsistTest source set.</purpose>
      </dependency>
      <dependency>
        <name>Pitest</name>
        <version>1.19.0</version>
        <source>gradle/libs.versions.toml [versions.pitest]</source>
        <purpose>Mutation testing. QualityGatesConventionPlugin configures with Kotest plugin and STRONGER mutators.</purpose>
      </dependency>
      <dependency>
        <name>Kover</name>
        <version>0.9.3</version>
        <source>gradle/libs.versions.toml [versions.kover]</source>
        <purpose>Kotlin-native code coverage (replaces JaCoCo). QualityGatesConventionPlugin wires into check task.</purpose>
      </dependency>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="CONST-1" type="version-catalog-mandatory">
      <description>All dependency versions MUST be defined in gradle/libs.versions.toml. Convention plugins read from Version Catalog using Catalog.kt helper.</description>
      <enforcement>Catalog.kt throws error if alias not found. Convention plugins fail fast on missing versions.</enforcement>
    </constraint>
    <constraint id="CONST-2" type="no-wildcard-imports">
      <description>KotlinCommonConventionPlugin enforces ktlint rule ij_kotlin_name_count_to_use_star_import = 2147483647 preventing wildcard imports.</description>
      <enforcement>ktlintCheck task fails on wildcard imports. Build cannot complete with violations.</enforcement>
    </constraint>
    <constraint id="CONST-3" type="kotest-only">
      <description>TestingConventionPlugin configures Kotest as primary framework. JUnit is explicitly forbidden per architecture mandate.</description>
      <enforcement>No JUnit dependencies in convention plugins. Native Kotest runner via io.kotest plugin.</enforcement>
    </constraint>
    <constraint id="CONST-4" type="jvm-21-toolchain">
      <description>KotlinCommonConventionPlugin enforces JVM 21 toolchain via configure&lt;KotlinJvmProjectExtension&gt; { jvmToolchain(21) }.</description>
      <enforcement>Gradle toolchain resolution enforces JVM 21. Build fails if wrong JVM version detected.</enforcement>
    </constraint>
    <constraint id="CONST-5" type="zero-violations">
      <description>QualityGatesConventionPlugin sets ignoreFailures = false for all quality tools (ktlint, Detekt, Pitest, Kover).</description>
      <enforcement>check task fails on any quality gate violation. CI/CD cannot pass with violations.</enforcement>
    </constraint>
    <constraint id="CONST-6" type="plugin-order">
      <description>For product modules: apply eaf.testing BEFORE eaf.spring-boot to avoid circular dependency issues with @SpringBootTest.</description>
      <enforcement>Manual enforcement in build.gradle.kts files. Convention plugins cannot control application order.</enforcement>
    </constraint>
    <constraint id="CONST-7" type="catalog-alignment">
      <description>TestingConventionPlugin includes afterEvaluate block calling enforceCatalogAlignment() to verify dependencies match Version Catalog versions.</description>
      <enforcement>Build fails if dependency version drifts from catalog. Prevents manual version overrides.</enforcement>
    </constraint>
  </constraints>

  <interfaces>
    <interface id="INT-1" type="plugin-application">
      <description>Module build files apply convention plugins using plugin DSL: plugins { id("eaf.kotlin-common") }</description>
      <contract>Convention plugins must be idempotent and not conflict when applied to same module</contract>
      <example>
plugins {
    id("eaf.kotlin-common")
    id("eaf.quality-gates")
}
      </example>
    </interface>
    <interface id="INT-2" type="version-catalog">
      <description>Convention plugins read versions via Catalog.kt: val catalog = loadCatalog(path); catalog.version("kotlin")</description>
      <contract>Catalog.kt parses gradle/libs.versions.toml and caches results. Throws error on missing alias.</contract>
      <example>
val catalog = loadCatalog(target.rootProject.projectDir.resolve("gradle/libs.versions.toml").toPath())
val kotlinVersion = catalog.version("kotlin")
val springBootLib = catalog.library("spring-boot-starter-web")
      </example>
    </interface>
    <interface id="INT-3" type="test-source-sets">
      <description>TestingConventionPlugin creates source sets: test, integrationTest, konsistTest, perfTest with proper classpath inheritance</description>
      <contract>Each source set extends from test configuration. Tests go in src/{sourceSetName}/kotlin directories.</contract>
      <example>
// Automatically created by TestingConventionPlugin:
// src/test/kotlin - Business logic tests with Nullable Pattern
// src/integration-test/kotlin - Testcontainers integration tests
// src/konsist-test/kotlin - Konsist architecture verification
// src/perf-test/kotlin - Performance benchmark tests
      </example>
    </interface>
    <interface id="INT-4" type="quality-gates-lifecycle">
      <description>QualityGatesConventionPlugin wires quality tools into check task: ktlintCheck, detekt, koverXmlReport, koverVerify, konsistTest, pitest</description>
      <contract>Running ./gradlew check executes all quality gates in sequence. Build fails on first violation.</contract>
      <example>
// check task dependencies (automatic):
check.dependsOn(test, ktlintCheck, detekt, koverXmlReport, koverVerify, konsistTest, integrationTest, pitest)
      </example>
    </interface>
    <interface id="INT-5" type="spring-boot-integration">
      <description>SpringBootConventionPlugin applies eaf.kotlin-common first, then Spring Boot plugin, dependency management, and Kotlin Spring/JPA plugins</description>
      <contract>Plugin must be applied to product modules only (not framework libraries). Includes common starters automatically.</contract>
      <example>
plugins {
    id("eaf.spring-boot")  // Includes kotlin-common, Spring Boot, Kotlin Spring/JPA
}
// Automatic dependencies: web, actuator, validation, security, oauth2-resource-server, modulith
      </example>
    </interface>
  </interfaces>

  <tests>
    <standards>
      <standard>Constitutional TDD: All convention plugin logic must be test-first. Write failing tests before implementing plugin features.</standard>
      <standard>Native Kotest: Use Kotest FunSpec or BehaviorSpec. JUnit is forbidden even for build-logic testing.</standard>
      <standard>GradleTestKit: Test convention plugins using Gradle TestKit with real project builds.</standard>
      <standard>Catalog Verification: Verify Catalog.kt correctly parses versions and libraries from gradle/libs.versions.toml.</standard>
      <standard>Plugin Application: Test that convention plugins can be applied to modules without conflicts.</standard>
      <standard>Quality Gate Integration: Verify that check task includes all quality gates (ktlint, Detekt, Kover, Pitest).</standard>
    </standards>

    <locations>
      <location>build-logic/src/test/kotlin/conventions/KotlinCommonConventionPluginTest.kt</location>
      <location>build-logic/src/test/kotlin/conventions/SpringBootConventionPluginTest.kt</location>
      <location>build-logic/src/test/kotlin/conventions/QualityGatesConventionPluginTest.kt</location>
      <location>build-logic/src/test/kotlin/conventions/TestingConventionPluginTest.kt</location>
      <location>build-logic/src/test/kotlin/conventions/CatalogTest.kt</location>
    </locations>

    <ideas>
      <idea id="TEST-1" maps-to="AC1">
        <name>Verify build-logic composite build structure</name>
        <approach>Use GradleTestKit to create test project, apply build-logic via includeBuild, verify plugins are available</approach>
        <validation>Assert that plugins { id("eaf.kotlin-common") } resolves without error</validation>
      </idea>
      <idea id="TEST-2" maps-to="AC2">
        <name>Verify each convention plugin applies successfully</name>
        <approach>For each plugin (kotlin-common, spring-boot, quality-gates, testing), create minimal test project with Gradle TestKit and apply plugin</approach>
        <validation>Assert build succeeds and expected tasks are registered (ktlintCheck, detekt, jvmKotest, integrationTest, konsistTest)</validation>
      </idea>
      <idea id="TEST-3" maps-to="AC3">
        <name>Verify Version Catalog alignment enforcement</name>
        <approach>Create test project with dependency that conflicts with catalog version. Verify afterEvaluate block fails build.</approach>
        <validation>Assert build fails with "Version drift detected" error message</validation>
      </idea>
      <idea id="TEST-4" maps-to="AC4">
        <name>Verify consistent configuration across modules</name>
        <approach>Apply convention plugins to multiple test modules (library, spring-boot-app). Run ./gradlew build and verify all use same Kotlin version, JVM target, compiler flags.</approach>
        <validation>Assert all modules compile with Kotlin 2.2.21, JVM 21, -Xjsr305=strict, allWarningsAsErrors=true</validation>
      </idea>
      <idea id="TEST-5" maps-to="AC5">
        <name>Verify framework/core module applies plugins correctly</name>
        <approach>Run ./gradlew :framework:core:dependencies and verify Kotlin, ktlint, Detekt, Kotest dependencies are present with correct versions</approach>
        <validation>Assert dependency tree shows Kotlin 2.2.21, Kotest 6.0.4, no version conflicts</validation>
      </idea>
      <idea id="TEST-6" maps-to="AC2,AC4">
        <name>Verify Catalog.kt version/library resolution</name>
        <approach>Create test TOML file with sample versions and libraries. Use Catalog.kt to parse and verify correct resolution including version.ref references.</approach>
        <validation>Assert catalog.version("kotlin") returns "2.2.21", catalog.library("spring-boot-starter-web") returns correct module and version</validation>
      </idea>
    </ideas>
  </tests>
</story-context>
