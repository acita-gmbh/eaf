package conventions

import org.gradle.api.Plugin
import org.gradle.api.Project
import java.io.File

/**
 * Convention plugin for EAF pre-commit hook infrastructure (Story 8.2).
 *
 * Generates and installs git hooks that enforce quality standards before commits.
 * Target: <30 second execution time for fast local feedback.
 */
class PreCommitHooksConventionPlugin : Plugin<Project> {
    override fun apply(target: Project) {
        with(target) {
            // Only apply to root project
            if (this != rootProject) {
                return
            }

            configurePreCommitHookTasks()
        }
    }

    private fun Project.configurePreCommitHookTasks() {
        // Task: Install git hooks
        tasks.register("installGitHooks") {
            group = "verification"
            description = "Install pre-commit and commit-msg hooks (Story 8.2)"

            doLast {
                val hooksDir = File(rootDir, ".git/hooks")
                if (!hooksDir.exists()) {
                    logger.warn("‚ö†Ô∏è .git/hooks directory not found - is this a git repository?")
                    return@doLast
                }

                // Generate pre-commit hook
                val preCommitHook = File(hooksDir, "pre-commit")
                preCommitHook.writeText(generatePreCommitScript())
                preCommitHook.setExecutable(true)
                logger.lifecycle("‚úì Pre-commit hook installed: ${preCommitHook.absolutePath}")

                // Generate commit-msg hook
                val commitMsgHook = File(hooksDir, "commit-msg")
                commitMsgHook.writeText(generateCommitMsgScript())
                commitMsgHook.setExecutable(true)
                logger.lifecycle("‚úì Commit-msg hook installed: ${commitMsgHook.absolutePath}")

                logger.lifecycle("")
                logger.lifecycle("üéâ Git hooks installed successfully!")
                logger.lifecycle("   Pre-commit validation will run on every commit")
                logger.lifecycle("   Target: <30 seconds execution time")
                logger.lifecycle("   Bypass: git commit --no-verify (emergencies only)")
            }
        }

        // Task: Uninstall git hooks (safety mechanism per Winston's recommendation)
        tasks.register("uninstallGitHooks") {
            group = "verification"
            description = "Remove pre-commit hooks (Story 8.2 - rollback capability)"

            doLast {
                val hooksDir = File(rootDir, ".git/hooks")
                val preCommitHook = File(hooksDir, "pre-commit")
                val commitMsgHook = File(hooksDir, "commit-msg")

                if (preCommitHook.exists()) {
                    preCommitHook.delete()
                    logger.lifecycle("‚úì Pre-commit hook removed")
                }

                if (commitMsgHook.exists()) {
                    commitMsgHook.delete()
                    logger.lifecycle("‚úì Commit-msg hook removed")
                }

                logger.lifecycle("‚úÖ Git hooks uninstalled")
            }
        }

        // Subtask 1.5: Basic validation task (will be enhanced in Task 2-5)
        tasks.register("preCommitCheck") {
            group = "verification"
            description = "Run pre-commit validation checks (Story 8.2)"

            doLast {
                logger.lifecycle("üîç EAF Pre-Commit Validation")
                logger.lifecycle("=".repeat(50))
                logger.lifecycle("‚è±Ô∏è  Target: <30 seconds total")
                logger.lifecycle("")

                val startTime = System.currentTimeMillis()

                // Placeholder for Phase 2-5 implementation
                logger.lifecycle("[ ] Validation checks will be implemented in Tasks 2-5")
                logger.lifecycle("    - ktlint format (Task 2)")
                logger.lifecycle("    - Detekt static analysis (Task 2)")
                logger.lifecycle("    - Konsist test naming (Task 2)")
                logger.lifecycle("    - Smart unit tests (Task 3)")
                logger.lifecycle("    - Commit message (Task 4)")

                val duration = (System.currentTimeMillis() - startTime) / 1000.0
                logger.lifecycle("")
                logger.lifecycle("‚úÖ Pre-commit validation complete (${duration}s)")
            }
        }
    }

    private fun generatePreCommitScript(): String {
        // Using """ for multiline string and ${'$'} to escape shell variables
        return """#!/bin/sh
# EAF Pre-Commit Hook (Story 8.2)
# Auto-generated by: ./gradlew installGitHooks
# DO NOT EDIT - Modify build-logic/src/main/kotlin/conventions/PreCommitHooksConventionPlugin.kt instead

echo "üîç Running EAF pre-commit validation..."

# Execute Gradle pre-commit check task
./gradlew preCommitCheck --daemon --quiet
EXIT_CODE=${'$'}?

if [ ${'$'}EXIT_CODE -ne 0 ]; then
    echo ""
    echo "‚ùå Pre-commit validation failed"
    echo "   Fix issues and try again"
    echo "   Or bypass: git commit --no-verify (emergencies only)"
    echo ""
    exit 1
fi

exit 0
"""
    }

    private fun generateCommitMsgScript(): String {
        return """#!/bin/sh
# EAF Commit Message Hook (Story 8.2)
# Auto-generated by: ./gradlew installGitHooks
# DO NOT EDIT - Modify build-logic/src/main/kotlin/conventions/PreCommitHooksConventionPlugin.kt instead

COMMIT_MSG_FILE=${'$'}1
COMMIT_MSG=${'$'}(cat "${'$'}COMMIT_MSG_FILE")

# Placeholder for Task 4 implementation
# Will validate: [JIRA-XXX] type: description format

echo "‚úì Commit message validation (Task 4 pending)"
exit 0
"""
    }
}
